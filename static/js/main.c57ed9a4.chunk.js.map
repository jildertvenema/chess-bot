{"version":3,"sources":["chess/pieces.js","chess/enums.js","chess/board-layout.js","MoveHistory.js","bot/points.js","bot/index.js","App.js","chess/index.js","chess/utils.js","index.js"],"names":["PiecesMoves","routeIsFree","board","element","target","type","deltaX","x","deltaY","y","rook","king","diffY","Math","abs","moves","queen","bishop","knight","pawn","diffX","color","WHITE","BLACK","KING","QUEEN","PAWN","3","1","6","5","MoveHistory","styled","div","secondsToDate","s","Date","toISOString","substr","props","useState","playertime","setPlayertime","botTime","setBotTime","useEffect","timer","setInterval","lastIsBot","prev","clearInterval","style","paddingTop","children","ROOK","BISHOP","KNIGHT","getRandom","array","floor","random","length","generateMoves","chess","concat","getMovesForPiece","map","nodes","evalBoard","points","currentPoints","POINTS","toUpperCase","ENUMS","swapPieces","clonedBoard","doMove","clone","forEach","row","push","cloneBoard","minimax","depth","maximizingPlayer","a","b","value","winner","kings","hasWinner","Infinity","max","move","board2","nextNode","newScore","min","DoMove","Promise","resolve","pointsElement","document","getElementById","innerHTML","Board","Square","left","top","highlighted","PieceImage","image","WinnerOverlay","Centerd","CurrentTurn","PromoteOverlay","PieceSelector","constructor","currentTurn","moveHistory","resetGame","this","initializeBoard","doThis","forEachPosition","pieceString","BoardLayout","startsWith","pieceType","substring","indexOf","piece","getPieceAtPosition","position","isValidMove","targetPiece","Moves","valid","routeFree","console","error","promote","_selectedPiece","ChessPiece","React","memo","onClick","pieceKey","next","App","selectedPiece","setSelectedPiece","validMoves","setValidMoves","promotion","setPromotion","animating","setAnimating","animatedPiece","useRef","animateMove","current","display","newLeft","newTop","stepLeft","steptop","currentLeft","currentTop","interval","setTimeout","doBotMove","BotMove","then","onPieceClick","isHighlighted","find","validMove","promoteClick","className","id","ref","width","height","zIndex","backgroundSize","transition","opacity","backgroundImage","i","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.c57ed9a4.chunk.js","sourcesContent":["// {\r\n//   x: 0,\r\n//   y: 0,\r\n//   moves: 0\r\n// }\r\n\r\nexport default class PiecesMoves {\r\n  static routeIsFree = (board, element, target) => {\r\n    if (element.type === \"knight\") {\r\n      return true;\r\n    }\r\n\r\n    const deltaX = target.x > element.x ? 1 : target.x === element.x ? 0 : -1;\r\n    const deltaY = target.y > element.y ? 1 : target.y === element.y ? 0 : -1;\r\n\r\n    let y = element.y;\r\n    let x = element.x;\r\n\r\n    while (y !== target.y || x !== target.x) {\r\n      if (x !== target.x) x += deltaX;\r\n      if (y !== target.y) y += deltaY;\r\n\r\n      if (board[x][y] && !(target.x === x && target.y === y)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  static rook = (element, target) => {\r\n    // staight line\r\n    return element.x === target.x || element.y === target.y;\r\n  };\r\n  static king = (element, target) => {\r\n    // castling\r\n    let diffY = Math.abs(target.y - element.y);\r\n    if (element.x === target.x && diffY === 2 && element.moves === 0) {\r\n      return true;\r\n    }\r\n\r\n    return (\r\n      // each dimension max distance of 1\r\n      Math.abs(element.x - target.x) <= 1 && Math.abs(element.y - target.y) <= 1\r\n    );\r\n  };\r\n  static queen = (element, target) => {\r\n    // staight line\r\n    if (element.x === target.x || element.y === target.y) {\r\n      return true;\r\n    }\r\n\r\n    // diagonal\r\n    if (Math.abs(element.x - target.x) === Math.abs(element.y - target.y)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  static bishop = (element, target) => {\r\n    // diagonal\r\n    return Math.abs(element.x - target.x) === Math.abs(element.y - target.y);\r\n  };\r\n\r\n  static knight = (element, target) => {\r\n    if (\r\n      Math.abs(element.x - target.x) === 2 &&\r\n      Math.abs(element.y - target.y) === 1\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      Math.abs(element.y - target.y) === 2 &&\r\n      Math.abs(element.x - target.x) === 1\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  static pawn = (element, target) => {\r\n    const diffX =\r\n      element.color === \"white\" ? element.x - target.x : target.x - element.x;\r\n\r\n    if (element.y !== target.y) {\r\n      const diffY = Math.abs(target.y - element.y);\r\n\r\n      return (\r\n        diffY === 1 &&\r\n        diffX === 1 &&\r\n        target.color &&\r\n        target.color !== element.color\r\n      );\r\n    }\r\n\r\n    if (diffX <= 0) {\r\n      return false;\r\n    }\r\n\r\n    if (target.color && target.color !== element.color) {\r\n      return false;\r\n    }\r\n\r\n    if (element.moves === 0) {\r\n      return diffX <= 2;\r\n    } else {\r\n      return diffX === 1;\r\n    }\r\n  };\r\n}\r\n","export const WHITE = \"white\";\r\nexport const BLACK = \"black\";\r\nexport const ROOK = \"rook\";\r\nexport const KING = \"king\";\r\nexport const QUEEN = \"queen\";\r\nexport const BISHOP = \"bishop\";\r\nexport const KNIGHT = \"knight\";\r\nexport const PAWN = \"pawn\";\r\n","export default {\r\n  3: [\r\n    \"\",\r\n    \"\",\r\n    \"black-knight\",\r\n    \"black-knight\",\r\n    \"black-knight\",\r\n    \"black-knight\",\r\n    \"black-knight\",\r\n    \"\"\r\n  ],\r\n  1: [],\r\n  6: [],\r\n  5: [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    // \"black-rook\",\r\n    // \"black-knight\",\r\n    // \"black-bishop\",\r\n    // \"black-queen\",\r\n    \"white-pawn\"\r\n    // \"black-bishop\",\r\n    // \"black-knight\",\r\n    // \"black-rook\"\r\n  ]\r\n};\r\n\r\n// export default {\r\n//   0: [\r\n//     \"black-rook\",\r\n//     \"black-knight\",\r\n//     \"black-bishop\",\r\n//     \"black-queen\",\r\n//     \"black-king\",\r\n//     \"black-bishop\",\r\n//     \"black-knight\",\r\n//     \"black-rook\"\r\n//   ],\r\n//   1: [\r\n//     \"black-pawn\",\r\n//     \"black-pawn\",\r\n//     \"black-pawn\",\r\n//     \"black-pawn\",\r\n//     \"black-pawn\",\r\n//     \"black-pawn\",\r\n//     \"black-pawn\",\r\n//     \"black-pawn\"\r\n//   ],\r\n//   6: [\r\n//     \"white-pawn\",\r\n//     \"white-pawn\",\r\n//     \"white-pawn\",\r\n//     \"white-pawn\",\r\n//     \"white-pawn\",\r\n//     \"white-pawn\",\r\n//     \"white-pawn\",\r\n//     \"white-pawn\"\r\n//   ],\r\n//   7: [\r\n//     \"white-rook\",\r\n//     \"white-knight\",\r\n//     \"white-bishop\",\r\n//     \"white-queen\",\r\n//     \"white-king\",\r\n//     \"white-bishop\",\r\n//     \"white-knight\",\r\n//     \"white-rook\"\r\n//   ]\r\n// };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MoveHistory = styled.div`\r\n  height: 400px;\r\n  overflow-y: scroll;\r\n  width: 500px;\r\n  margin: 0 auto;\r\n  background-color: darkgray;\r\n  margin-top: 8px;\r\n  max-width: 100%;\r\n\r\n  @media (min-width: 1441px) {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 20%;\r\n  }\r\n`;\r\n\r\nconst secondsToDate = (s) => new Date(s * 1000).toISOString().substr(11, 8);\r\n\r\nexport default (props) => {\r\n  const [playertime, setPlayertime] = useState(0);\r\n  const [botTime, setBotTime] = useState(0);\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (props.lastIsBot) {\r\n        setPlayertime((prev) => prev + 1);\r\n      } else {\r\n        setBotTime((prev) => prev + 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [props.lastIsBot]);\r\n\r\n  return (\r\n    <MoveHistory>\r\n      <div style={{ paddingTop: 8 }}>\r\n        Player time: {secondsToDate(playertime)}\r\n      </div>\r\n      <div>Bot time: {secondsToDate(botTime)}</div>\r\n      ------------------------------------\r\n      {props.children}\r\n    </MoveHistory>\r\n  );\r\n};\r\n","export const ROOK = 5;\r\nexport const KING = 9999999;\r\nexport const QUEEN = 9;\r\nexport const BISHOP = 3;\r\nexport const KNIGHT = 3;\r\nexport const PAWN = 1;\r\n","import * as ENUMS from \"../chess/enums\";\r\nimport * as POINTS from \"./points\";\r\n\r\nconst getRandom = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\nconst generateMoves = (chess, board, color) => {\r\n  let moves = [];\r\n\r\n  for (let x = 0; x < 8; x++) {\r\n    for (let y = 0; y < 8; y++) {\r\n      const element = board[x][y];\r\n      if (element && element.color === color) {\r\n        moves = moves.concat(\r\n          chess.getMovesForPiece(element, board).map((target) => ({\r\n            target,\r\n            element\r\n          }))\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return moves;\r\n};\r\n\r\nlet nodes = 0;\r\n\r\nconst DoMove = (chess) => {\r\n  return new Promise((resolve) => {\r\n    const depth = 4;\r\n    nodes = 0;\r\n    const { element, target, value } = minimax(\r\n      chess,\r\n      chess.board,\r\n      depth,\r\n      true,\r\n      -Infinity,\r\n      Infinity\r\n    );\r\n\r\n    const pointsElement = document.getElementById(\"bot-points\");\r\n    pointsElement.innerHTML = \"Bot eval: \" + value;\r\n\r\n    if (value > 0) {\r\n      pointsElement.innerHTML += \" (in bot's favour)\";\r\n      pointsElement.style.color = \"red\";\r\n    } else if (value < 0) {\r\n      pointsElement.innerHTML += \" (in your favour)\";\r\n      pointsElement.style.color = \"green\";\r\n    } else {\r\n      pointsElement.innerHTML = \"Bot points: 0 (tie)\";\r\n      pointsElement.style.color = \"white\";\r\n    }\r\n\r\n    const evalElement = document.getElementById(\"bot-evaluated\");\r\n    evalElement.innerHTML = nodes + \" moves evaluated.\";\r\n\r\n    resolve({ element, target });\r\n  });\r\n};\r\n\r\nconst evalBoard = (board) => {\r\n  let points = 0;\r\n  for (let x = 0; x < 8; x++) {\r\n    for (let y = 0; y < 8; y++) {\r\n      const type = board[x][y].type;\r\n      if (type) {\r\n        let currentPoints = type ? POINTS[type.toUpperCase()] || 0 : 0;\r\n\r\n        if (board[x][y].color === ENUMS.WHITE) {\r\n          points -= currentPoints;\r\n        } else if (board[x][y].color === ENUMS.BLACK) {\r\n          points += currentPoints;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return points;\r\n};\r\n\r\nconst hasWinner = (board) => {\r\n  const kings = [];\r\n  board.forEach((row) => {\r\n    row.forEach((element) => {\r\n      if (element && element.type === ENUMS.KING) {\r\n        kings.push(element);\r\n      }\r\n    });\r\n  });\r\n\r\n  if (kings.length === 2) {\r\n    return false;\r\n  } else {\r\n    return kings[0];\r\n  }\r\n};\r\n\r\nconst cloneBoard = (board) => {\r\n  const clone = [];\r\n  board.forEach((row, x) => {\r\n    clone.push([]);\r\n    row.forEach((element, y) => {\r\n      clone[x][y] = element ? { ...element } : 0;\r\n    });\r\n  });\r\n\r\n  return clone;\r\n};\r\n\r\nconst swapPieces = (element, target, clonedBoard) => {\r\n  clonedBoard[element.x][element.y] = 0;\r\n  clonedBoard[target.x][target.y] = element;\r\n\r\n  element.x = target.x;\r\n  element.y = target.y;\r\n  element.moves++;\r\n\r\n  if (element.type === ENUMS.PAWN) {\r\n    if (element.color === ENUMS.WHITE && element.x === 0) {\r\n      element.type = ENUMS.QUEEN;\r\n    }\r\n    if (element.color === ENUMS.BLACK && element.x === 7) {\r\n      element.type = ENUMS.QUEEN;\r\n    }\r\n  }\r\n};\r\n\r\nconst doMove = (board, element, target) => {\r\n  element = { ...element };\r\n  target = { ...target };\r\n\r\n  const clonedBoard = cloneBoard(board);\r\n\r\n  // castling\r\n  if (\r\n    element.type === ENUMS.KING &&\r\n    Math.abs(element.y - target.y) === 2 &&\r\n    element.moves === 0\r\n  ) {\r\n    let rook = null;\r\n    let x = 0;\r\n    if (element.color === ENUMS.WHITE) {\r\n      x = 7;\r\n    }\r\n    if (element.x === x) {\r\n      let y = 1;\r\n      if (target.y > element.y) {\r\n        rook = clonedBoard[x][7];\r\n        y = 5;\r\n      } else {\r\n        rook = clonedBoard[x][0];\r\n        y = 3;\r\n      }\r\n      if (rook) {\r\n        swapPieces(rook, { x, y }, clonedBoard);\r\n      }\r\n    }\r\n  }\r\n\r\n  swapPieces(element, target, clonedBoard);\r\n\r\n  return clonedBoard;\r\n};\r\n\r\nconst minimax = (chess, board, depth, maximizingPlayer, a, b) => {\r\n  nodes++;\r\n  if (depth === 0) {\r\n    return { value: evalBoard(board) };\r\n  }\r\n\r\n  const winner = hasWinner(board);\r\n  if (winner && winner.color === ENUMS.BLACK) {\r\n    return { value: Infinity };\r\n  } else if (winner && winner.color === ENUMS.WHITE) {\r\n    return { value: -Infinity };\r\n  }\r\n\r\n  if (maximizingPlayer) {\r\n    let max = -Infinity;\r\n    const moves = generateMoves(chess, board, \"black\");\r\n    let move = getRandom(moves);\r\n    for (let { element, target } of moves) {\r\n      const board2 = doMove(board, element, target);\r\n      const nextNode = minimax(chess, board2, depth - 1, false, a, b);\r\n      const newScore = nextNode && nextNode.value ? nextNode.value : 0;\r\n\r\n      if (newScore > max) {\r\n        max = newScore;\r\n        move = { element, target, value: newScore };\r\n      }\r\n\r\n      a = Math.max(a, newScore);\r\n      if (a >= b) {\r\n        break;\r\n      }\r\n    }\r\n    return move;\r\n    // minimizing\r\n  } else {\r\n    let min = Infinity;\r\n    const moves = generateMoves(chess, board, \"white\");\r\n    let move = getRandom(moves);\r\n    for (let { element, target } of moves) {\r\n      const board2 = doMove(board, element, target);\r\n      const nextNode = minimax(chess, board2, depth - 1, true, a, b);\r\n      const newScore = nextNode && nextNode.value ? nextNode.value : 0;\r\n\r\n      if (newScore < min) {\r\n        min = newScore;\r\n        move = { element, target, value: newScore };\r\n      }\r\n\r\n      b = Math.min(b, newScore);\r\n      if (a >= b) {\r\n        break;\r\n      }\r\n    }\r\n    return move;\r\n  }\r\n};\r\n\r\nexport default DoMove;\r\n","import React, { useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport styled from \"styled-components\";\nimport Chess from \"./chess\";\nimport MoveHistory from \"./MoveHistory\";\nimport BotMove from \"./bot\";\n\nconst Board = styled.div`\n  position: relative;\n  width: 92vh;\n  height: 92vh;\n\n  @media (max-width: 900px) {\n    width: 92vw;\n    height: 92vw;\n  }\n\n  max-width: 900px;\n  max-height: 900px;\n  margin: 0 auto;\n  user-select: none;\n`;\n\nconst Square = styled.div`\n  position: absolute;\n  left: ${(props) => (100 / 8) * props.left}%;\n  top: ${(props) => (100 / 8) * props.top}%;\n  height: 12.5%;\n  width: 12.5%;\n  transition: top 1s ease-in-out;\n\n  background-color: ${(props) =>\n    (props.left + props.top) % 2 ? \"#575757\" : \"gray\"};\n\n  background-color: ${(props) => props.highlighted && \"#176717\"};\n  border: ${(props) => props.highlighted && \"1px solid #726969\"};\n  z-index: ${(props) => props.highlighted && \"3\"};\n`;\n\nconst PieceImage = styled.div`\n  background-image: url(\"${(props) => props.image}\");\n  background-size: cover;\n  cursor: pointer;\n  width: 100%;\n  height: 100%;\n\n  opacity: 0.8;\n  \n`;\n\nconst WinnerOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: grey;\n  opacity: 0.8;\n  z-index: 3;\n`;\n\nconst Centerd = styled.div`\n  color: white;\n  font-size: 32px;\n  height: 40px;\n  margin-top: 20%;\n`;\n\n// const Cordinate = styled.div`\n//   position: absolute;\n//   top: 0;\n//   padding: 4px;\n//   color: white;\n//   background-color: #555555;\n// `;\n\nconst CurrentTurn = styled.div`\n  color: white;\n  font-size: 26px;\n  margin-top: 16px;\n  margin-bottom: 4px;\n`;\n\nconst PromoteOverlay = styled(WinnerOverlay)`\n  position: fixed;\n`;\n\nconst PieceSelector = styled.div`\n  width: 100px;\n  height: 100px;\n  z-index: 5;\n  border: 1px solid darkgray;\n  margin: 16px;\n  float: left;\n`;\n\nconst chess = new Chess();\nlet _selectedPiece = null;\n\nconst ChessPiece = React.memo(\n  function ChessPiece({ x, y, piece, highlighted, onClick, pieceKey }) {\n    return (\n      <Square\n        key={x + \"-\" + y}\n        left={y}\n        top={x}\n        highlighted={highlighted}\n        onClick={() => onClick(piece, x, y)}\n      >\n        {pieceKey ? (\n          <PieceImage image={\"pieces-images/\" + pieceKey + \".png\"} />\n        ) : null}\n        {/* <Cordinate>\n          x:{x}y:{y}\n        </Cordinate> */}\n      </Square>\n    );\n  },\n  function (prev, next) {\n    return (\n      next.highlighted === prev.highlighted &&\n      next.piece.type === prev.piece.type &&\n      next.piece.color === prev.piece.color\n    );\n  }\n);\n\nexport default function App() {\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [promotion, setPromotion] = useState(false);\n  const [animating, setAnimating] = useState(null);\n  const animatedPiece = useRef();\n\n  const getMovesForPiece = (selectedPiece) => {\n    const validMoves = chess.getMovesForPiece(selectedPiece);\n    setValidMoves(validMoves);\n  };\n\n  const animateMove = (element, target) => {\n    setAnimating(element);\n\n    const left = (100 / 8) * element.y;\n    const top = (100 / 8) * element.x;\n    animatedPiece.current.style.left = left + \"%\";\n    animatedPiece.current.style.top = top + \"%\";\n    animatedPiece.current.style.display = \"block\";\n\n    const newLeft = (100 / 8) * target.y;\n    const newTop = (100 / 8) * target.x;\n\n    const stepLeft = (newLeft - left) / 20;\n    const steptop = (newTop - top) / 20;\n\n    let currentLeft = left;\n    let currentTop = top;\n\n    const interval = setInterval(() => {\n      currentLeft += stepLeft;\n      currentTop += steptop;\n\n      animatedPiece.current.style.left = currentLeft + \"%\";\n      animatedPiece.current.style.top = currentTop + \"%\";\n    }, 20);\n\n    setTimeout(() => {\n      clearInterval(interval);\n      animatedPiece.current.style.left = newLeft + \"%\";\n      animatedPiece.current.style.top = newTop + \"%\";\n      animatedPiece.current.style.display = \"none\";\n      setAnimating(null);\n    }, 400);\n  };\n\n  const doBotMove = () => {\n    setTimeout(() => {\n      BotMove(chess).then(({ element, target }) => {\n        animateMove(element, target);\n        chess.doMove(element, target);\n        //  render\n        setValidMoves([]);\n      });\n    }, 500);\n  };\n\n  const onPieceClick = (piece, x, y) => {\n    if (!selectedPiece) {\n      if (piece.color === \"white\") {\n        _selectedPiece = piece;\n        setSelectedPiece(piece);\n        getMovesForPiece(piece);\n      }\n    } else {\n      const pawn = selectedPiece.type === \"pawn\";\n      animateMove(_selectedPiece || selectedPiece, { x, y });\n      if (chess.doMove(_selectedPiece || selectedPiece, { x, y })) {\n        if (pawn && x === 0) {\n          setPromotion({ x, y });\n        } else {\n          doBotMove();\n        }\n        _selectedPiece = null;\n        setSelectedPiece(null);\n        setValidMoves([]);\n      } else {\n        if (piece.color === \"white\") {\n          _selectedPiece = piece;\n          setSelectedPiece(piece);\n          getMovesForPiece(piece);\n        }\n      }\n    }\n  };\n\n  const isHighlighted = (piece, x, y) => {\n    return (\n      validMoves.find((validMove) => validMove.x === x && validMove.y === y) &&\n      (!piece.color || piece.color !== chess.currentTurn)\n    );\n  };\n\n  const promoteClick = (type) => {\n    chess.promote(promotion, type);\n    setPromotion(false);\n    doBotMove();\n  };\n\n  return (\n    <div className=\"App\">\n      {promotion && (\n        <PromoteOverlay>\n          <Centerd>Pawn promotion</Centerd>\n          <PieceSelector onClick={() => promoteClick(\"queen\")}>\n            <PieceImage image=\"pieces-images/white-queen.png\" />\n          </PieceSelector>\n          <PieceSelector onClick={() => promoteClick(\"bishop\")}>\n            <PieceImage image=\"pieces-images/white-bishop.png\" />\n          </PieceSelector>\n          <PieceSelector onClick={() => promoteClick(\"rook\")}>\n            <PieceImage image=\"pieces-images/white-rook.png\" />\n          </PieceSelector>\n          <PieceSelector onClick={() => promoteClick(\"knight\")}>\n            <PieceImage image=\"pieces-images/white-knight.png\" />\n          </PieceSelector>\n        </PromoteOverlay>\n      )}\n\n      <CurrentTurn>\n        Current Turn:\n        {chess.currentTurn === \"white\" ? \" White (you)\" : \" Black (AI)\"}\n      </CurrentTurn>\n      <div id=\"bot-points\"></div>\n      <div id=\"bot-evaluated\"></div>\n\n      {chess.winner && (\n        <WinnerOverlay>\n          <Centerd>\n            {chess.winner[0].toUpperCase() + chess.winner.substring(1)} wins!\n          </Centerd>\n          <button\n            onClick={() => {\n              chess.resetGame();\n              setValidMoves([]);\n            }}\n          >\n            Play again\n          </button>\n        </WinnerOverlay>\n      )}\n      <Board>\n        {chess.board.map((row, x) => {\n          return row.map((piece, y) => (\n            <ChessPiece\n              key={x + \"-\" + y + piece.color + \"-\" + piece.type + animating}\n              pieceKey={animating !== piece && piece.color + \"-\" + piece.type}\n              y={y}\n              x={x}\n              piece={piece}\n              highlighted={isHighlighted(piece, x, y)}\n              onClick={onPieceClick}\n            />\n          ));\n        })}\n        {\n          <div\n            ref={animatedPiece}\n            style={{\n              position: \"absolute\",\n              width: \"12.5%\",\n              height: \"12.5%\",\n              zIndex: 9,\n              backgroundSize: \"cover\",\n              transition: \"\",\n              opacity: 0.8,\n              backgroundImage:\n                animating &&\n                `url(\"pieces-images/${animating.color}-${animating.type}.png\")`\n            }}\n          />\n        }\n      </Board>\n      <MoveHistory\n        lastIsBot={\n          chess.moveHistory.length\n            ? chess.moveHistory[0].piece.color === \"black\"\n            : true\n        }\n      >\n        {chess.moveHistory.map(({ piece, target }, i) => {\n          return (\n            <div key={i}>\n              {chess.moveHistory.length - i + \": \"}\n              {piece.color + \" \"}\n              {piece.type}\n              {\" x: \" + piece.x}\n              {\" y: \" + piece.y}\n              {target.type\n                ? \" takes \" + target.color + \" \" + target.type\n                : \" to \"}\n              {\" x: \" + target.x}\n              {\" y: \" + target.y}\n            </div>\n          );\n        })}\n      </MoveHistory>\n      {/* <button onClick={() => setShowCoordinates(!showCoordinates)}>\n        Show coordinates\n      </button> */}\n    </div>\n  );\n}\n","import { forEachPosition } from \"./utils\";\r\nimport Moves from \"./pieces\";\r\nimport * as ENUMS from \"./enums\";\r\nimport BoardLayout from \"./board-layout\";\r\n\r\n// const piece = {\r\n//   x: 0,\r\n//   y: 0,\r\n//   moves: 0,\r\n//   color: WHITE,\r\n//   type: ENUMS.KING\r\n// }\r\n\r\nexport default class Chess {\r\n  board = [];\r\n  currentTurn = ENUMS.WHITE;\r\n  winner = null;\r\n  moveHistory = [];\r\n\r\n  constructor() {\r\n    this.initializeBoard();\r\n  }\r\n\r\n  resetGame = () => {\r\n    this.board = [];\r\n    this.currentTurn = ENUMS.WHITE;\r\n    this.winner = null;\r\n    this.initializeBoard();\r\n  };\r\n\r\n  initializeBoard = () => {\r\n    forEachPosition((x, y) => {\r\n      if (!this.board[x]) {\r\n        this.board.push([]);\r\n      }\r\n\r\n      const pieceString = BoardLayout[x] && BoardLayout[x][y];\r\n      if (pieceString) {\r\n        const color = pieceString.startsWith(ENUMS.WHITE)\r\n          ? ENUMS.WHITE\r\n          : ENUMS.BLACK;\r\n\r\n        const pieceType = pieceString.substring(pieceString.indexOf(\"-\") + 1);\r\n\r\n        this.board[x].push({\r\n          x,\r\n          y,\r\n          moves: 0,\r\n          color: color,\r\n          type: pieceType\r\n        });\r\n      } else {\r\n        this.board[x].push(0);\r\n      }\r\n    });\r\n  };\r\n\r\n  swapPieces = (piece, target) => {\r\n    if (this.getPieceAtPosition(target).type === ENUMS.KING) {\r\n      this.winner = piece.color;\r\n    }\r\n\r\n    this.board[piece.x][piece.y] = 0;\r\n    this.board[target.x][target.y] = piece;\r\n\r\n    piece.x = target.x;\r\n    piece.y = target.y;\r\n\r\n    if (piece.type === ENUMS.PAWN) {\r\n      if (piece.color === ENUMS.WHITE && piece.x === 0) {\r\n        piece.type = ENUMS.QUEEN;\r\n      }\r\n      if (piece.color === ENUMS.BLACK && piece.x === 7) {\r\n        piece.type = ENUMS.QUEEN;\r\n      }\r\n    }\r\n\r\n    piece.moves++;\r\n  };\r\n\r\n  getPieceAtPosition = (position, board) => {\r\n    return (board || this.board)[position.x][position.y];\r\n  };\r\n\r\n  isValidMove = (piece, target, board) => {\r\n    board = board || this.board;\r\n    if (piece.x === target.x && piece.y === target.y) {\r\n      return false;\r\n    }\r\n\r\n    const targetPiece = this.getPieceAtPosition(target, board);\r\n\r\n    if (targetPiece && targetPiece.color === piece.color) {\r\n      return false;\r\n    }\r\n\r\n    const isValidMove = Moves[piece.type];\r\n\r\n    // if not defined\r\n    if (!isValidMove) {\r\n      return false;\r\n    }\r\n\r\n    const valid = isValidMove(piece, targetPiece || target);\r\n    const routeFree = Moves.routeIsFree(board, piece, target);\r\n\r\n    // castling\r\n    if (\r\n      piece.type === ENUMS.KING &&\r\n      Math.abs(piece.y - target.y) === 2 &&\r\n      piece.moves === 0\r\n    ) {\r\n      let rook = null;\r\n      let x = 0;\r\n      if (piece.color === ENUMS.WHITE) {\r\n        x = 7;\r\n      }\r\n      if (piece.x === x) {\r\n        let y = 1;\r\n        if (target.y > piece.y) {\r\n          rook = board[x][7];\r\n          y = 5;\r\n        } else {\r\n          rook = board[x][0];\r\n          y = 3;\r\n        }\r\n        return rook && routeFree && valid && rook.moves === 0;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return routeFree && valid;\r\n  };\r\n\r\n  doMove = (piece, target) => {\r\n    if (piece.color === this.currentTurn && this.isValidMove(piece, target)) {\r\n      this.moveHistory = [\r\n        { piece, target: this.getPieceAtPosition(target) || target },\r\n        ...this.moveHistory\r\n      ];\r\n\r\n      // castling\r\n      if (\r\n        piece.type === ENUMS.KING &&\r\n        Math.abs(piece.y - target.y) === 2 &&\r\n        piece.moves === 0\r\n      ) {\r\n        let rook = null;\r\n        let x = 0;\r\n        if (piece.color === ENUMS.WHITE) {\r\n          x = 7;\r\n        }\r\n        if (piece.x === x) {\r\n          let y = 1;\r\n          if (target.y > piece.y) {\r\n            rook = this.board[x][7];\r\n            y = 5;\r\n          } else {\r\n            rook = this.board[x][0];\r\n            y = 3;\r\n          }\r\n          if (rook) {\r\n            this.swapPieces(rook, { x, y });\r\n          }\r\n        }\r\n      }\r\n\r\n      this.swapPieces(piece, target);\r\n\r\n      // flip moves\r\n      this.currentTurn =\r\n        this.currentTurn === ENUMS.WHITE ? ENUMS.BLACK : ENUMS.WHITE;\r\n      return true;\r\n    } else {\r\n      console.error(\"NOT VALID MOVE\", piece, target);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  promote = ({ x, y }, type) => {\r\n    this.board[x][y].type = type;\r\n  };\r\n\r\n  getMovesForPiece = (piece, board) => {\r\n    const moves = [];\r\n    for (let x = 0; x < 8; x++) {\r\n      for (let y = 0; y < 8; y++) {\r\n        const target = { x, y };\r\n        const routeFree = Moves.routeIsFree(board || this.board, piece, target);\r\n        if (this.isValidMove(piece, target, board) && routeFree) {\r\n          moves.push(target);\r\n        }\r\n      }\r\n    }\r\n    return moves;\r\n  };\r\n}\r\n","export const forEachPosition = (doThis) => {\r\n  for (let x = 0; x < 8; x++) {\r\n    for (let y = 0; y < 8; y++) {\r\n      doThis(x, y);\r\n    }\r\n  }\r\n};\r\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}